###############################################################################
# Elastic Backend Stack
#
# This compose file:
#   - Creates a 2-node Elasticsearch cluster (es01, es02) with TLS enabled
#   - Runs a setup job to generate CA and node certificates
#   - Launches an uploader service that loads demo data
#   - Writes a demo API key into ./keys/api-key.txt (host-visible)
#
# Test the API key with:
#
#   curl -k -H "Authorization: ApiKey <Key>" https://localhost:9200/
#
# or use the default username and password with
#
#   curl -k -u elastic:elasticpassword https://localhost:9200/
#
###############################################################################

services:
  uploader:
    image: ghcr.io/mehtho/uploader:latest
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
    networks:
      - asr
    volumes:
      - ./cv-valid-dev.csv:/app/cv-valid-dev.csv:ro
      - generated-keys:/app/keys
      - ./keys:/app/keys
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-elasticpassword}

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION:-7.10.2}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD:-elasticpassword} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es02\n"\
          "    dns:\n"\
          "      - es02\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;

        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION:-7.10.2}
    container_name: es01
    environment:
      - node.name=es01
      - discovery.seed_hosts=es02
      - cluster.initial_master_nodes=es01,es02
      - ES_JAVA_OPTS=-Xms1g -Xmx1g

      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt

      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-elasticpassword}

    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es01-data:/usr/share/elasticsearch/data
      - certs:/usr/share/elasticsearch/config/certs
      - ./config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    networks:
      - asr
    ports:
      - "${ES_PORT:-9200}:9200"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 5

  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION:-7.10.2}
    container_name: es02
    environment:
      - node.name=es02
      - discovery.seed_hosts=es01
      - cluster.initial_master_nodes=es01,es02
      - ES_JAVA_OPTS=-Xms1g -Xmx1g

      - xpack.security.http.ssl.key=certs/es02/es02.key
      - xpack.security.http.ssl.certificate=certs/es02/es02.crt
      - xpack.security.transport.ssl.key=certs/es02/es02.key
      - xpack.security.transport.ssl.certificate=certs/es02/es02.crt

      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-elasticpassword}

    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es02-data:/usr/share/elasticsearch/data
      - certs:/usr/share/elasticsearch/config/certs
      - ./config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    networks:
      - asr
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 5

volumes:
  certs:
  es01-data:
  es02-data:
  generated-keys:

networks:
  asr:
    driver: bridge
